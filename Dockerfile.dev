# # syntax = docker/dockerfile:1

# # FROM ruby:3.3.4-alpine AS base

# # WORKDIR /app

# # RUN apk update && \
# #   apk add --no-cache \
# #   build-base \
# #   curl \
# #   postgresql-dev \
# #   git \
# #   gcompat \
# #   pkgconfig && \
# #   rm -rf /var/cache/apk/*

# # ENV RAILS_ENV="development" \
# #   BUNDLE_PATH="/usr/local/bundle" \
# #   BUNDLE_WITHOUT="production"

# # COPY Gemfile Gemfile.lock ./
# # RUN bundle install --jobs=4

# # COPY . .
# # # RUN chmod +x /rails/bin/docker-entrypoint
# # ENTRYPOINT ["/rails/bin/docker-entrypoint"]
# # EXPOSE 3000

# # CMD ["./bin/rails", "server"]

# # Use a Debian Slim-based Ruby image
# FROM ruby:3.3.4-slim AS base

# # Set the working directory
# WORKDIR /rails

# # Install dependencies, including PostgreSQL client libraries
# RUN apt-get update -qq && \
#   apt-get install --no-install-recommends -y \
#   build-essential \
#   curl \
#   libpq-dev \
#   git \
#   && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*

# # Set environment variables
# ENV RAILS_ENV="development" \
#   BUNDLE_PATH="/usr/local/bundle" \
#   BUNDLE_WITHOUT="production"

# # Copy the Gemfile and Gemfile.lock into the image, and install the gems
# COPY Gemfile Gemfile.lock ./
# RUN bundle install --jobs=4

# # Copy the rest of the application code
# COPY . .

# RUN chmod +x /rails/bin/kickstart && \
#   chmod +x /rails/bin/docker-entrypoint

# # Set the entry point to a custom script (if needed)
# ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# # Expose port 3000 to the host
# EXPOSE 3000

# # Command to run the Rails server
# CMD ["./bin/rails", "server"]

# syntax = docker/dockerfile:1

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version
ARG RUBY_VERSION=3.3.4
FROM docker.io/library/ruby:$RUBY_VERSION-slim AS base

# Rails app lives here
WORKDIR /rails

# Install base packages
RUN apt-get update -qq && \
  apt-get install --no-install-recommends -y curl libjemalloc2 libvips libpq-dev git && \
  rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Set development environment
ENV RAILS_ENV="development" \
  BUNDLE_PATH="/usr/local/bundle" \
  BUNDLE_WITHOUT="production"

# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems
RUN apt-get update -qq && \
  apt-get install --no-install-recommends -y build-essential pkg-config && \
  rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle install && \
  rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git

# Copy application code
COPY . .

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/ || true

# Final stage for app image
FROM base

# Install packages needed for deployment
RUN apt-get update -qq && \
  apt-get install --no-install-recommends -y curl libjemalloc2 libvips libpq-dev && \
  rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Copy built artifacts: gems, application
COPY --from=build "${BUNDLE_PATH}" "${BUNDLE_PATH}"
COPY --from=build /rails /rails

# Run and own only the runtime files as a non-root user for security
RUN groupadd --system --gid 1000 rails && \
  useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \
  chown -R rails:rails db log storage tmp
USER 1000:1000

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
CMD ["./bin/rails", "server", "-b", "0.0.0.0"]
